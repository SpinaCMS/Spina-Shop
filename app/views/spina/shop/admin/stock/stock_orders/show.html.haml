= form_with url: spina.new_shop_admin_stock_order_receive_products_path(@stock_order), data: {turbo_method: :get} do
  %header#header
    #header_actions
      - if @stock_order.open?
        = link_to spina.close_order_shop_admin_stock_order_path(@stock_order), data: {turbo_method: :post}, class: 'button' do
          = icon('cross')
          =t 'spina.shop.stock_orders.close_order'
      - elsif @stock_order.closed?
        = link_to spina.reopen_order_shop_admin_stock_order_path(@stock_order), data: {turbo_method: :post}, class: 'button' do
          = icon('pencil')
          =t 'spina.shop.stock_orders.reopen_order'

      = link_to spina.edit_shop_admin_stock_order_path(@stock_order), class: 'button icon-only' do
        = icon('pencil')

      - if @stock_order.open?
        = button_tag t('spina.shop.stock_orders.receive_products'), type: :submit, class: 'button button-primary'

      - if @stock_order.concept?
        = link_to spina.place_order_shop_admin_stock_order_path(@stock_order), class: 'button button-primary', data: {turbo_method: :post, turbo_confirm: t('spina.shop.stock_orders.place_order_confirmation')} do
          = icon('check')
          =t 'spina.shop.stock_orders.place_order'

    .breadcrumbs= render_breadcrumbs separator: '<div class="divider"></div>'

  .wizard-steps
    .wizard-step.done
      .wizard-step-circle
        .wizard-step-label=t "spina.shop.stock_orders.status.concept"
      .wizard-step-connector

    .wizard-step{class: ('done' if @stock_order.ordered?)}
      .wizard-step-circle
        %i.icon.icon-mail
        .wizard-step-label{style: "white-space: nowrap"}=t "spina.shop.stock_orders.status.ordered"
      .wizard-step-connector

    .wizard-step{class: ('done' if @stock_order.closed?)}
      .wizard-step-circle
        %i.icon.icon-shop
        .wizard-step-label=t "spina.shop.stock_orders.status.closed"
      .wizard-step-connector

  .divider-container
    %hr.divider/

  .information-tables
    .information-table
      %table
        %tr
          %th= Spina::Shop::StockOrder.model_name.human
          %td= "##{@stock_order.id}"
        %tr
          %th= Spina::Shop::StockOrder.human_attribute_name(:supplier)
          %td= link_to @stock_order.supplier.name, spina.shop_admin_supplier_path(@stock_order.supplier)

        %tr
          %th= Spina::Shop::StockOrder.human_attribute_name(:download)
          %td
            = link_to 'Excel download', spina.shop_admin_stock_order_path(@stock_order, format: :xlsx)
            %br/
            = link_to 'PDF download', spina.shop_admin_stock_order_path(@stock_order, format: :pdf)
        %tr
          %th Inboekers
          %td
            != Spina::Shop::StockLevelAdjustment.where(description: "StockOrder ##{@stock_order.id}").pluck(:actor).uniq.join("<br />")

    .information-table
      %table
        %tr
          %th= Spina::Shop::StockOrder.human_attribute_name(:ordered_at)
          %td
            - if @stock_order.ordered_at.present?
              =l @stock_order.ordered_at, format: '%e %B %Y'
        %tr
          - if @stock_order.closed?
            %th= Spina::Shop::StockOrder.human_attribute_name(:closed_at)
            %td=l @stock_order.closed_at, format: '%e %B %Y'
          - else
            %th= Spina::Shop::StockOrder.human_attribute_name(:expected_delivery)
            %td
              - if @stock_order.expected_delivery.present?
                =l @stock_order.expected_delivery, format: '%e %B %Y'
        %tr
          %th= Spina::Shop::StockOrder.human_attribute_name(:order_value)
          %td= number_to_currency @stock_order.order_value

        %tr
          %th= Spina::Shop::StockOrder.human_attribute_name(:received_value)
          %td= number_to_currency @stock_order.received_value

    .information-table
      %table
        %tr
          %th= Spina::Shop::StockOrder.human_attribute_name(:delivery_tracking_url)
          %td= link_to @stock_order.delivery_tracking_url, "#{@stock_order.delivery_tracking_url}"

        %tr
          %th= Spina::Shop::StockOrder.human_attribute_name(:reference)
          %td{style: 'white-space: pre-wrap'}= @stock_order.reference

        %tr
          %th= Spina::Shop::StockOrder.human_attribute_name(:note)
          %td{style: 'white-space: pre-wrap'}= @stock_order.note

        - if @stock_order.feedback.present?
          %tr
            %th= Spina::Shop::StockOrder.human_attribute_name(:feedback)
            %td{style: 'white-space: pre-wrap'}= @stock_order.feedback

  .divider-container
    %hr.divider/

  .table-container
    %table.table.table-clickable
      %thead
        %tr
          %th{style: 'width: 20px'}
          %th{style: 'width: 30px'}
          %th= Spina::Shop::Product.human_attribute_name(:name)
          %th= Spina::Shop::Product.human_attribute_name(:location)
          %th.text-right= Spina::Shop::OrderedStock.human_attribute_name(:quantity)
          %th.text-right= Spina::Shop::Product.human_attribute_name(:expiration_date)
          %th.text-right= Spina::Shop::OrderedStock.human_attribute_name(:received)
          - if @stock_order.concept?
            %th

      - @stock_order.ordered_stock.joins(:product).includes(product: :product_translations).order('spina_shop_product_translations.name').each do |ordered|
        %tr
          %td.align-center{style: 'width: 20px'}
            .form-checkbox{style: 'width: 20px'}
              = check_box_tag 'ordered_stock_ids[]', ordered.id
              %label
          %td
            - if ordered.product.root.product_images.any?
              = image_tag main_app.url_for(ordered.product.root.product_images.first.file.variant(resize: '60x60')), width: 30
          %td
            = link_to ordered.product.full_name, spina.shop_admin_product_path(ordered.product)
            %small= number_to_currency ordered.product.cost_price
          %td= ordered.product.location
          %td.text-right
            = ordered.quantity
            - if ordered.product.supplier_packing_unit > 1
              = "(colli: #{(ordered.quantity / ordered.product.supplier_packing_unit).ceil})"
            %small= number_to_currency ordered.quantity * ordered.product.cost_price

          %td.text-right
            - ordered.product.stock_level_adjustments.where(description: "StockOrder ##{@stock_order.id}").where("expiration_month IS NOT NULL AND expiration_year IS NOT NULL").group("expiration_month, expiration_year").pluck("expiration_month, expiration_year").map{|tht| Date.parse("1-#{tht[0]}-#{tht[1]}")}.sort.each do |date|
              - if minimum_expiration_period_warning?(@stock_order, date)
                .text-danger=l date, format: "%b '%y"
              - else
                =l date, format: "%b '%y"
                %br/

          %td.text-right{style: 'width: 150px'}
            .progress.progress-bar-primary{class: ("progress-bar-danger" if ordered.received > ordered.quantity.to_d)}
              .progress-bar
                - 5.times do
                  .progress-bar-divider
                .progress-bar-inner{style: "width: #{ordered.received / ordered.quantity.to_d * 100}%"}
              .progress-label
                = ordered.received
                = Spina::Shop::OrderedStock.human_attribute_name(:received)

          - if @stock_order.concept?
            %td.text-right
              = link_to spina.shop_admin_stock_order_ordered_stock_path(@stock_order, ordered), class: 'button button-link button-mini icon-only', data: {turbo_method: :delete, turbo_confirm: "Weet je het zeker?"} do
                = icon('trash')