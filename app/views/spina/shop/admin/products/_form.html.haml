= form_for @product, url: @product.new_record? ? spina.shop_admin_products_path : spina.shop_admin_product_path(@product) do |f|
  = hidden_field_tag :locale, @locale
  = f.hidden_field :product_category_id

  %header#header
    .breadcrumbs= render_breadcrumbs separator: '<div class="divider"></div>'

    = render 'spina/shop/admin/shared/locale_switcher' unless @product.new_record?

    #header_actions
      - if f.object.product_images.any?
        %div{style: 'display: inline-block', data: {dropdown: true}}
          = link_to '#', class: 'button', data: {trigger: 'dropdown', target: '#attachments'} do
            Download
            %i.icon.icon-caret-down{style: 'margin-right: 0'}

          %ul#attachments.align-right
            - f.object.product_images.each do |product_image|
              %li
                = link_to attachment_url(product_image, :file), target: :blank do
                  Afbeelding

      - if @product.persisted?
        = link_to spina.duplicate_shop_admin_product_path(@product), class: 'button' do
          = icon('pages')
          = t('spina.shop.products.duplicate')
                  
      %button.button.button-primary{type: 'submit', style: "margin-left: 3px"}
        = icon('check')
        =t 'spina.shop.products.save'

  - if @product.errors.any?
    - content_for :notifications do
      .notification.notification-danger.animated.fadeInRight
        = icon('exclamation')
        .notification-message
          = Spina::Shop::Product.human_attribute_name :cannot_be_created
          %small
            - @product.errors.full_messages.each do |message|
              = message
              %br/
        = link_to '#', data: {close_notification: true} do
          = icon('cross')
  
  .sidebar-form
    - Mobility.with_locale(@locale) do
      .sidebar-form-content
        .well
          .sidebar-form-group
            .sidebar-form-label
              = Spina::Shop::Product.human_attribute_name :name

            .sidebar-form-control
              = f.text_field :name, placeholder: Spina::Shop::Product.human_attribute_name(:name), value: f.object.name

          .sidebar-form-group
            .sidebar-form-label
              = Spina::Shop::Product.human_attribute_name :sku

            .sidebar-form-control            
              = f.text_field :sku, placeholder: Spina::Shop::Product.human_attribute_name(:sku), disabled: !@product.editable_sku

        .well
          .sidebar-form-group
            .sidebar-form-control
              %trix-toolbar.clearfix{ id: "product_description_toolbar", data: { trix_editor_id: "product_description_editor" }}
                .button-groups
                  .button-group
                    %button.button.button-small{ type: 'button', tabindex: -1, title: 'Bold', data: { trix_attribute: 'bold', trix_key: 'b' }}
                      .icon.icon-bold
                    %button.button.button-small{ type: 'button', tabindex: -1, title: 'Italic', data: { trix_attribute: 'italic', trix_key: 'i' }}
                      .icon.icon-italic
                    %button.button.button-small{ type: 'button', tabindex: -1, title: 'Bullets', data: { trix_attribute: 'bullet' }}
                      .icon.icon-list-ul
                %trix-editor.text-input{input: "product_description", toolbar: "product_description_toolbar", id: "product_description_editor", placeholder: Spina::Shop::Product.human_attribute_name(:description)}
                = f.hidden_field :description, id: 'product_description'
        
        - if @product_category.present?
          .well
            = f.fields_for :properties do |property_builder|
              - @product_category.product_properties.includes(property_options: :translations).each do |property|
                = render partial: 'spina/shop/admin/products/properties/property_fields', locals: {f: property_builder, property: property, object: @product}

        .well
          .sidebar-form-group
            .sidebar-form-label
              = Spina::Shop::Product.human_attribute_name :must_be_of_age_to_buy
            .sidebar-form-control
              = f.check_box :must_be_of_age_to_buy, data: {switch: true}

        .well
          .sidebar-form-group
            .sidebar-form-label
              = Spina::Shop::Product.human_attribute_name :supplier
            .sidebar-form-control
              = f.text_field :supplier, placeholder: Spina::Shop::Product.human_attribute_name(:supplier)

        .well
          - if Spina::Shop::ProductCollection.any?
            .sidebar-form-group
              .sidebar-form-label
                = Spina::Shop::Product.human_attribute_name :product_collections

              .sidebar-form-control
                = f.select :product_collection_ids, options_for_select(Spina::Shop::ProductCollection.pluck(:name, :id), f.object.product_collection_ids), {}, class: 'select2', multiple: true, style: 'width: 100%'

          .sidebar-form-group
            .sidebar-form-label
              = Spina::Shop::Product.human_attribute_name :related_products

            .sidebar-form-control
              = f.select :related_product_ids, options_for_select(f.object.related_products.map{|p| [p.name, p.id]}, f.object.related_product_ids), {}, class: 'select-products', multiple: true, style: 'width: 100%'

        .well
          .sidebar-form-group
            .sidebar-form-label
              = Spina::Shop::Product.human_attribute_name :seo_title
            .sidebar-form-control
              = f.text_field :seo_title, placeholder: Spina::Shop::Product.human_attribute_name(:seo_title), value: f.object.seo_title(fallback: false, default: nil)

          .sidebar-form-group
            .sidebar-form-label
              = Spina::Shop::Product.human_attribute_name :seo_description
            .sidebar-form-control
              = f.text_field :seo_description, placeholder: Spina::Shop::Product.human_attribute_name(:seo_description), value: f.object.seo_description(fallback: false, default: nil)

          .sidebar-form-group
            .sidebar-form-label
              = Spina::Shop::Product.human_attribute_name :materialized_path
            .sidebar-form-control
              = f.text_field :materialized_path, disabled: true

      .sidebar-form-sidebar
        #productImageUploader.sidebar-form-images
          = f.fields_for :product_images, f.object.product_images.ordered do |image_builder|
            - if image_builder.object.file.present?
              .sidebar-form-image{data: {id: image_builder.object.id}}>
                = image_tag attachment_url(image_builder.object, :file, :fit, 320, 240)
                = image_builder.hidden_field :id
                = image_builder.hidden_field :position, class: 'product-image-position'
                = image_builder.check_box :_destroy, style: 'display: none'
                = link_to '#', style: "position: absolute; bottom: 0; right: 0" do
                  = image_tag 'spina/shop/delete-big.png'
                  = image_tag 'spina/shop/delete-big-confirm.png'
                .sidebar-form-image-overlay

        = f.attachment_field :product_images_files, direct: true, multiple: true, presigned: true, class: "sidebar-form-image-dropzone"

        .form-group
          .form-label
            = Spina::Shop::Product.human_attribute_name :active
          
          .form-control
            = f.check_box :active, data: {switch: true}

        .form-group
          .form-label
            = Spina::Shop::Product.human_attribute_name :base_price
          
          .form-control{data: {form_prepend: t('number.currency.format.unit')}}
            .input-group
              = f.text_field :base_price, value: number_with_precision(f.object.base_price, precision: 2)
              .select-dropdown
                = f.select :price_includes_tax, options_for_select([['incl.', true], ['excl.', false]], f.object.price_includes_tax)
              .select-dropdown{style: "min-width: 120px"}
                = f.select :tax_group_id, options_for_select(Spina::Shop::TaxGroup.all.map{|t| [t.name, t.id]}, f.object.tax_group_id)

        .form-group
          .form-label
            = Spina::Shop::Product.human_attribute_name :promotional_price
          
          .form-control{data: {form_prepend: t('number.currency.format.unit')}}
            = f.text_field :promotional_price, value: number_with_precision(f.object.promotional_price, precision: 2)

        - if Spina::Shop::CustomerGroup.any?
          .form-group{style: 'margin-bottom: 40px'}
            .form-label
              = Spina::Shop::Product.human_attribute_name :price_exceptions
            
            - @product.price_exceptions['customer_groups'].try(:each) do |price_exception|
              = render partial: 'price_exception_fields', locals: {f: f, price_exception: price_exception}

            = link_to_add_price_exception f do
              = icon('plus')

        .form-group
          .form-label
            = Spina::Shop::Product.human_attribute_name :sales_category

          .form-control
            .select-dropdown{style: 'width: 100%'}
              = f.select :sales_category_id, options_for_select(Spina::Shop::SalesCategory.all.map{|c| [c.name, c.id]}, f.object.sales_category_id)

        .form-group
          .form-label
            = Spina::Shop::Product.human_attribute_name :cost_price
          
          .form-control{data: {form_prepend: 'â‚¬'}}
            = f.text_field :cost_price, value: number_with_precision(f.object.cost_price, precision: 2)

        .form-group
          .form-label
            = Spina::Shop::Product.human_attribute_name :stock_enabled

          .form-control
            = f.check_box :stock_enabled, data: {switch: true}

        .form-group
          .form-label
            .pull-right.text-muted{style: 'font-weight: 400'}=l(f.object.expiration_date, format: '%B \'%y') if f.object.expiration_date
            = Spina::Shop::Product.human_attribute_name :can_expire

          .form-control
            = f.check_box :can_expire, data: {switch: true}

        - if f.object.stock_enabled?
          - unless f.object.new_record?
            .form-group
              .form-label
                %small= link_to t('spina.shop.products.stock_history'), spina.shop_admin_product_stock_level_adjustments_path(f.object), class: 'text-muted pull-right', data: {remote: true}
                = Spina::Shop::Product.human_attribute_name :stock_level

              .form-control
                .pull-right{style: 'position: absolute; right: 10px;top: 11px; font-size: 14px'}
                  = link_to t('spina.shop.products.adjust_stock'), spina.new_shop_admin_product_stock_level_adjustment_path(f.object), data: {remote: true}
                = text_field_tag :stock_level, f.object.stock_level, disabled: true

          .form-group
            .form-label
              = Spina::Shop::Product.human_attribute_name :available_at_supplier

            .form-control
              = f.check_box :available_at_supplier, data: {switch: true}

        .form-group
          .form-label
            = Spina::Shop::Product.human_attribute_name :limit_per_order
          .form-control
            = f.number_field :limit_per_order, placeholder: Spina::Shop::Product.human_attribute_name(:limit_per_order)

        .form-group
          .form-label
            = Spina::Shop::Product.human_attribute_name :location
          
          .form-control
            = f.text_field :location, placeholder: Spina::Shop::Product.human_attribute_name(:location)

        .form-group
          .form-label
            = Spina::Shop::Product.human_attribute_name :weight
          
          .form-control{data: {form_append: 'gr'}}
            = f.text_field :weight, value: number_with_precision(f.object.weight, precision: 3, strip_insignificant_zeros: true)

        .form-group
          .form-label
            = Spina::Shop::Product.human_attribute_name :ean

          .form-control
            = f.text_field :ean, placeholder: Spina::Shop::Product.human_attribute_name(:ean)

        .form-group
          .form-label
            = Spina::Shop::Product.human_attribute_name :supplier_reference

          .form-control
            = f.text_field :supplier_reference, placeholder: Spina::Shop::Product.human_attribute_name(:supplier_reference)

        .form-group
          .form-label
            = Spina::Shop::Product.human_attribute_name :created_at

          .form-control
            = f.datetime_field :created_at

        - unless @product.new_record?
          .pull-right
            - if @product.archived?
              = link_to t('spina.shop.products.unarchive'), spina.unarchive_shop_admin_product_path(@product), method: :post, class: 'button button-link'
            - else
              = link_to t('spina.shop.products.archive'), spina.archive_shop_admin_product_path(@product), method: :post, class: 'button button-link', data: {confirm: t('spina.shop.products.archive_confirmation', name: @product.name)}

            - if @product.deletable
              = link_to t('spina.shop.products.delete'), spina.shop_admin_product_path(@product), method: :delete, class: 'button button-link button-danger', data: {confirm: t('spina.shop.products.delete_confirmation', name: @product.name)}, style: 'padding-right: 0'
